#!/bin/bash
# Install packages for the UM and UMDPs.
# Allows a choice of GRIB-API and EcCodes, which are mutually exclusive.
set -eu

ubuntu_major=$(lsb_release -rs | cut -d. -f1)

function usage {
  # Print command line options
  echo 'Usage: install-um-extras [-e|--eccodes] [-g|--grib-api] [-v|--version <x.y>]'
  echo 'Options:'
  echo '  -e, --eccodes        Install the EcCodes GRIB library'
  echo '  -g, --grib-api       Install the GRIB-API GRIB library'
  echo '  -h, --help           Show this help and exit'
  echo '  -v, --version <x.y>  Install packages for the selected UM version'
  echo
  echo 'This script will install the packages necessary for using the UM and UMDPs.'
  echo "The packages required for the UM's GRIB functionality vary by UM version:"
  echo ' - UM 11.1 or earlier requires the GRIB-API library.'
  echo ' - UM 11.2 or later requires the EcCodes library.'
  echo 'These two libraries are mutually exclusive and cannot be installed together.'
  echo
  echo 'UM 13.3 or later requires the use of Ubuntu 22.04 and installs eCcodes and'
  echo 'MPICH3 from source.'
  echo
  echo 'Use the -v argument to automatically install the correct packages, e.g.:'
  echo '  install-um-extras -v 11.2'
  echo 'Alternatively, the --eccodes or --grib-api arguments may be provided to'
  echo 'explicitly select a particular library.'
  echo 'To install a different library re-run the script with the appropriate argument.'
  echo
  echo 'EcCodes is only available when running Ubuntu 18.04 or later, where it is'
  echo 'the default choice if no arguments are provided. If an earlier version of'
  echo 'Ubuntu is detected the GRIB-API library will be installed by default instead.'
}

function ereport {
  # Print an error message, print usage, then exit (non-zero)
  echo "${1:-Unknown error}"
  usage
  exit 1
}

function get_version {
  # Turn an x.y version number into an integer
  um_version=${1#vn}  # Remove leading vn, if present
  um_major=$(echo $um_version | cut -d. -f1)
  um_minor=$(echo $um_version | cut -d. -f2) # Ignores sub-releases (x.y.z)
  um_version=$((10*um_major + um_minor))
}

function process_args {
  # Parse and process the command line arguments

  if [ $# -ge 1 ] ; then
    case "$1" in
      -e|--eccodes)
          if [ $ubuntu_major -lt 18 ]; then
            ereport "EcCodes installation requires Ubuntu 18 or later"
          fi
          grib_library=libeccodes-dev
          ;;
      -g|--grib_api|--grib-api)
          grib_library=libgrib-api-dev
          ;;
      -h|--help)
          usage
          exit 0
          ;;
      -v|--version)
          shift
          get_version $1
          output_dir=/usr/local/um${1}
          if [ $# -eq 0 ] ; then
            ereport "No UM version number provided"
          fi
          if [ $um_version -ge 112 ]; then
            grib_library=libeccodes-dev
          else
            grib_library=libgrib-api-dev
          fi
          ;;
       *) ereport "Unrecognised argument: $1"
          ;;
    esac
    shift
    # Up to 2 options at a time are permitted:
    if [ $# -gt 1 ]; then
      ereport "Too many arguments"
    fi
  fi
}

# Set defaults
if [ $ubuntu_major -ge 18 ]; then
  # Assume a recent UM release (11.2+)
  grib_library=libeccodes-dev
else
  # Assume an older UM release (-11.1)
  grib_library=libgrib-api-dev
fi

process_args $@

echo "dependencies will be stored in $output_dir"
mkdir -p $output_dir/umdir

echo "Installing hdf5..."
#apt-get install -y libnetcdf-dev libhdf5-serial-dev netcdf-bin
apt-get install libhdf5-mpich-dev

echo "Installing parallel yaxt..."
yaxt_version=0.9.0
yaxt_sha256=d3673e88c1cba3b77e0821393b94b5952d8ed7dc494305c8cf93e7ebec19483c
# The configure script needs to run an MPI test executable which can fail if hostname is not recognised
cp /etc/hosts /etc/hosts.bak
hostname_current=$(hostname)
echo "127.0.0.1 ${hostname_current}" > /etc/hosts
echo "::1       ${hostname_current}" >> /etc/hosts
cd /usr/src
wget https://www.dkrz.de/redmine/attachments/download/498/yaxt-${yaxt_version}.tar.gz
echo "${yaxt_sha256} yaxt-${yaxt_version}.tar.gz" | sha256sum --check
tar -xf yaxt-${yaxt_version}.tar.gz
mkdir yaxt-${yaxt_version}_build
cd yaxt-${yaxt_version}_build
../yaxt-${yaxt_version}/configure --with-idxtype=long CC=mpicc FC=mpif90 FPP="mpif90 -E -cpp"
make -j 4
make install
cd ..
rm -r yaxt-${yaxt_version}.tar.gz yaxt-${yaxt_version} yaxt-${yaxt_version}_build
# Reset hosts file
cat /etc/hosts.bak > /etc/hosts
rm /etc/hosts.bak

echo "Installing netcdf with parallel HDF5"
ncc_version=4.7.4
ncc_sha256=99930ad7b3c4c1a8e8831fb061cb02b2170fc8e5ccaeda733bd99c3b9d31666b
cd /usr/src
wget https://github.com/Unidata/netcdf-c/archive/v${ncc_version}.tar.gz
echo "${ncc_sha256} v${ncc_version}.tar.gz" | sha256sum --check
tar -xf v${ncc_version}.tar.gz
mkdir netcdf-c-${ncc_version}_build
cd netcdf-c-${ncc_version}_build
../netcdf-c-${ncc_version}/configure CC=mpicc CXX=mpicxx FF=mpif90 FC=mpif90 CFLAGS="-I/usr/include/hdf5/mpich" \
    LDFLAGS="-L/usr/lib/x86_64-linux-gnu/hdf5/mpich -Wl,-rpath=/usr/lib/x86_64-linux-gnu/hdf5/mpich"
make -j 4
make install
cd ..
rm -r v${ncc_version}.tar.gz netcdf-c-${ncc_version} netcdf-c-${ncc_version}_build

echo "Installing netcdf-fortran with paralle HDF5"
ncf_version=4.5.3
ncf_sha256=c6da30c2fe7e4e614c1dff4124e857afbd45355c6798353eccfa60c0702b495a
cd /usr/src
wget https://github.com/Unidata/netcdf-fortran/archive/v${ncf_version}.tar.gz
echo "${ncf_sha256} v${ncf_version}.tar.gz" | sha256sum --check
tar -xf v${ncf_version}.tar.gz
mkdir netcdf-fortran-${ncf_version}_build
cd netcdf-fortran-${ncf_version}_build
../netcdf-fortran-${ncf_version}/configure CC=mpicc CXX=mpicxx FF=mpif90 FC=mpif90
make -j 4
make install
cd ..
rm -r v${ncf_version}.tar.gz netcdf-fortran-${ncf_version} netcdf-fortran-${ncf_version}_build

echo "Installing netcdf-cxx with parallel HDF5"
nccxx_version=4.3.1
nccxx_sha256=e3fe3d2ec06c1c2772555bf1208d220aab5fee186d04bd265219b0bc7a978edc
cd /usr/src
wget https://github.com/Unidata/netcdf-cxx4/archive/v${nccxx_version}.tar.gz
echo "${nccxx_sha256} v${nccxx_version}.tar.gz" | sha256sum --check
tar -xf v${nccxx_version}.tar.gz
mkdir netcdf-cxx4-${nccxx_version}_build
cd netcdf-cxx4-${nccxx_version}_build
../netcdf-cxx4-${nccxx_version}/configure CC=mpicc CXX=mpicxx FF=mpif90 FC=mpif90 CFLAGS="-I/usr/include/hdf5/mpich" \
    LDFLAGS="-L/usr/local/lib -Wl,-rpath=/usr/local/lib"
make -j 4
make install
cd ..
rm -r v${nccxx_version}.tar.gz netcdf-cxx4-${nccxx_version} netcdf-cxx4-${nccxx_version}_build

echo "Installing XIOS..."
xios_revision=1866
cd /usr/src
ln -s /usr/bin/make /usr/bin/gmake
svn co http://forge.ipsl.jussieu.fr/ioserver/svn/XIOS/trunk@${xios_revision} XIOS
cd XIOS
echo "export HDF5_INC_DIR=/usr/include/hdf5/mpich" > arch/arch-GCC_LINUX.env
echo "export HDF5_LIB_DIR=/usr/lib/x86_64-linux-gnu/hdf5/mpich" >> arch/arch-GCC_LINUX.env
echo "export NETCDF_INC_DIR=/usr/local/include" >> arch/arch-GCC_LINUX.env
echo "export NETCDF_LIB_DIR=/usr/local/lib" >> arch/arch-GCC_LINUX.env
./make_xios --full --arch GCC_LINUX --job 4
cp lib/libxios.a /usr/lib
cp inc/* /usr/include
cd ..
rm -r XIOS


# Check chosen library is available:
if [ $ubuntu_major -lt 18 ]; then
  if [ "$grib_library" = "libeccodes-dev" ]; then
    ereport "The EcCodes library is not available at this Ubuntu release.
Upgrade to Ubuntu 18.04 or later, or supply -v <x.y> to use UM 11.1 or earlier."
  fi

elif [ $ubuntu_major -eq 18 ]; then
    # Settings for Ubuntu 18.04
    
    set -x

    echo "Installing UM and mule dependencies..."
    apt-get install -y python-numpy python-dev python-mock zenity libio-stringy-perl libipc-run-perl libperl-critic-perl $grib_library

    echo
    echo "Adding mule to the installed python packages..."
    echo "${output_dir}/umdir/mule/lib" > /usr/lib/python2.7/dist-packages/mule.pth
    
    echo
    echo "Installing UMDP dependencies..."
    apt-get install -y texlive texlive-latex-extra texlive-generic-extra texlive-science
    echo

elif [ $ubuntu_major -eq 22 ]; then
    # Settings for Ubuntu 22.04

    echo "Installing UM and mule dependencies..."
    apt-get install -y libio-stringy-perl libipc-run-perl libperl-critic-perl

    echo
    echo "Configuring UM python settings..."
    update-alternatives --install /usr/bin/python python /usr/bin/python3 1
    update-alternatives --install /usr/bin/python python /usr/bin/python2 2
    pip2 install numpy mock
    echo
    echo "Adding mule to the installed python packages..."
    echo "${output_dir}/umdir/mule/lib" > /usr/lib/python2.7/dist-packages/mule.pth
    
    echo
    echo "Installing UMDP dependencies..."
    apt-get install -y texlive texlive-latex-extra texlive-science

    echo
    echo "Installing eCcodes from source..."
    apt-get install -y libopenjp2-7-dev cmake
    cd ${output_dir}
    curl -L -s -S https://confluence.ecmwf.int/download/attachments/45757960/eccodes-2.30.2-Source.tar.gz | tar -xz
    cd eccodes-2.30.2-Source
    mkdir -p build && cd build
    # can't put directly into /usr
    mkdir -p /usr/src/eccodes
    cmake -DCMAKE_INSTALL_PREFIX=/usr/src/eccodes -DENABLE_JPG=ON ../.
    make
    ctest
    make install
    # now copy necessary files into /usr
    cp /usr/src/eccodes/bin/* /usr/bin/.
    cp /usr/src/eccodes/lib/*.so /usr/lib/.
    cp /usr/src/eccodes/include/* /usr/include/.
    cd ${output_dir}
    rm -rf eccodes-2.30.2-Source
    
fi
