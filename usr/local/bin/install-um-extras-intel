#!/bin/bash
# Install packages for the UM and UMDPs.
# Allows a choice of GRIB-API and EcCodes, which are mutually exclusive.
set -eu

ubuntu_major=$(lsb_release -rs | cut -d. -f1)

function usage {
  # Print command line options
  echo 'Usage: install-um-extras [-e|--eccodes] [-g|--grib-api] [-v|--version <x.y>]'
  echo 'Options:'
  echo '  -e, --eccodes        Install the EcCodes GRIB library'
  echo '  -g, --grib-api       Install the GRIB-API GRIB library'
  echo '  -h, --help           Show this help and exit'
  echo '  -v, --version <x.y>  Install packages for the selected UM version'
  echo
  echo 'This script will install the packages necessary for using the UM and UMDPs.'
  echo "The packages required for the UM's GRIB functionality vary by UM version:"
  echo ' - UM 11.1 or earlier requires the GRIB-API library.'
  echo ' - UM 11.2 or later requires the EcCodes library.'
  echo 'These two libraries are mutually exclusive and cannot be installed together.'
  echo
  echo 'UM 13.3 or later requires the use of Ubuntu 22.04 and installs eCcodes and'
  echo 'MPICH3 from source.'
  echo
  echo 'Use the -v argument to automatically install the correct packages, e.g.:'
  echo '  install-um-extras -v 11.2'
  echo 'Alternatively, the --eccodes or --grib-api arguments may be provided to'
  echo 'explicitly select a particular library.'
  echo 'To install a different library re-run the script with the appropriate argument.'
  echo
  echo 'EcCodes is only available when running Ubuntu 18.04 or later, where it is'
  echo 'the default choice if no arguments are provided. If an earlier version of'
  echo 'Ubuntu is detected the GRIB-API library will be installed by default instead.'
}

function ereport {
  # Print an error message, print usage, then exit (non-zero)
  echo "${1:-Unknown error}"
  usage
  exit 1
}

function get_version {
  # Turn an x.y version number into an integer
  um_version=${1#vn}  # Remove leading vn, if present
  um_major=$(echo $um_version | cut -d. -f1)
  um_minor=$(echo $um_version | cut -d. -f2) # Ignores sub-releases (x.y.z)
  um_version=$((10*um_major + um_minor))
}

function process_args {
  # Parse and process the command line arguments

  if [ $# -ge 1 ] ; then
    case "$1" in
      -e|--eccodes)
          if [ $ubuntu_major -lt 18 ]; then
            ereport "EcCodes installation requires Ubuntu 18 or later"
          fi
          grib_library=libeccodes-dev
          ;;
      -g|--grib_api|--grib-api)
          grib_library=libgrib-api-dev
          ;;
      -h|--help)
          usage
          exit 0
          ;;
      -v|--version)
          shift
          get_version $1
          output_dir=/usr/local/um${1}
          if [ $# -eq 0 ] ; then
            ereport "No UM version number provided"
          fi
          if [ $um_version -ge 112 ]; then
            grib_library=libeccodes-dev
          else
            grib_library=libgrib-api-dev
          fi
          ;;
       *) ereport "Unrecognised argument: $1"
          ;;
    esac
    shift
    # Up to 2 options at a time are permitted:
    if [ $# -gt 1 ]; then
      ereport "Too many arguments"
    fi
  fi
}

# Set defaults
if [ $ubuntu_major -ge 18 ]; then
  # Assume a recent UM release (11.2+)
  grib_library=libeccodes-dev
else
  # Assume an older UM release (-11.1)
  grib_library=libgrib-api-dev
fi

process_args $@

echo "dependencies will be stored in $output_dir"
mkdir -p $output_dir/umdir


# versions
HDF5_VERSION="1.14.3"
NETCDF_C_VERSION="4.9.2"
NETCDF_FORTRAN_VERSION="4.6.1"
NETCDF_CXX_VERSION="4.3.1"
PNETCDF_VERSION="1.12.3"
LIBPNG_VERSION="1.2.59"
JASPER_VERSION="1.900.1"
LIBAEC_VERSION="1.1.3"
ECCODES_VERSION="2.35.0"
SHUMLIB_VERSION="13.0"
OASIS_MCT_VERSION="5.1"

export DEPS_DIR=/usr/local/intel

# compilers
# cannot yet use icx and icpx
export CC=icc
export CXX=icpx
export FC=ifort
export F77=ifort
export MPICC='mpiicc -cc=icc'
export MPICXX='mpiicc -cxx=icpx'
export MPIF77=mpiifort
export MPIF90=mpiifort

export NETCDF=$DEPS_DIR
export HDF5=$DEPS_DIR
export PNETCDF=$DEPS_DIR

export LD_LIBRARY_PATH="$DEPS_DIR/lib:$LD_LIBRARY_PATH"

mkdir -p $DEPS_DIR
mkdir -p ${DEPS_DIR}/bin


# libpng
cd $DEPS_DIR
wget https://sourceforge.net/projects/libpng/files/libpng12/1.2.59/libpng-${LIBPNG_VERSION}.tar.xz/download
tar xf download
rm -rf download
cd libpng-${LIBPNG_VERSION}
./configure --prefix=$DEPS_DIR
make -j 4
make install
cd ..
rm -rf libpng-${LIBPNG_VERSION}

# required by netcdf
apt-get -y install libcurl4-openssl-dev libxml2-dev libsz2 libbz2-dev zlib1g zlib1g-dev

# jasper
cd $DEPS_DIR
wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/jasper-${JASPER_VERSION}.tar.gz
tar xf jasper-${JASPER_VERSION}.tar.gz
rm jasper-${JASPER_VERSION}.tar.gz
cd jasper-${JASPER_VERSION}
./configure --prefix=$DEPS_DIR
make -j 4
make install
cd ..
rm -rf jasper-${JASPER_VERSION}

# hdf5
cd $DEPS_DIR
HDF5_VERSION_SHORT=$(echo $HDF5_VERSION | awk -F '.' '{print $1"."$2}')
wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION_SHORT}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz
tar xf hdf5-${HDF5_VERSION}.tar.gz
rm hdf5-${HDF5_VERSION}.tar.gz
cd hdf5-${HDF5_VERSION}
mkdir build
cd build
CC=$MPICC FC=$MPIF90 ../configure --prefix=$DEPS_DIR --enable-parallel --enable-fortran
make -j 4
make install
cd ../..
rm -rf hdf5-${HDF5_VERSION}
ls $DEPS_DIR/lib
ls $DEPS_DIR/include
ls $DEPS_DIR/bin

# netcdf-c
wget https://downloads.unidata.ucar.edu/netcdf-c/${NETCDF_C_VERSION}/netcdf-c-${NETCDF_C_VERSION}.tar.gz
tar xf netcdf-c-${NETCDF_C_VERSION}.tar.gz
rm netcdf-c-${NETCDF_C_VERSION}.tar.gz
cd netcdf-c-${NETCDF_C_VERSION}
mkdir build
cd build
CPPFLAGS="-I${DEPS_DIR}/include" \
    LDFLAGS="-L${DEPS_DIR}/lib -lhdf5 -lhdf5_hl" \
    CC=$MPICC ../configure --prefix=$DEPS_DIR 
make -j 4
make install
cd ../..
rm -rf netcdf-c-${NETCDF_C_VERSION}
ls $DEPS_DIR/lib
ls $DEPS_DIR/include
ls $DEPS_DIR/bin

# netcdf-fortran
wget https://downloads.unidata.ucar.edu/netcdf-fortran/${NETCDF_FORTRAN_VERSION}/netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz
tar xf netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz
rm netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz
cd netcdf-fortran-${NETCDF_FORTRAN_VERSION}
mkdir build
cd build
CPPFLAGS="$(${DEPS_DIR}/bin/nc-config --cflags)" LDFLAGS="$(${DEPS_DIR}/bin/nc-config --libs)" \
../configure --prefix=$DEPS_DIR
make
make install
cd ../..
rm -rf netcdf-fortran-${NETCDF_FORTRAN_VERSION}

# netcdf-c++
cd $DEPS_DIR
wget https://downloads.unidata.ucar.edu/netcdf-cxx/${NETCDF_CXX_VERSION}/netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz
tar xf netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz
rm netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz
cd netcdf-cxx4-${NETCDF_CXX_VERSION}
mkdir build
cd build
CC=$CC CXX=$CXX CPPFLAGS="$(${DEPS_DIR}/bin/nc-config --cflags)" LDFLAGS="$(${DEPS_DIR}/bin/nc-config --libs)" \
../configure --prefix=$DEPS_DIR
make
make install
cd ../..
rm -rf netcdf-cxx4-${NETCDF_CXX_VERSION}
ls $DEPS_DIR/lib
ls $DEPS_DIR/include
ls $DEPS_DIR/bin

# pnetcdf
wget https://parallel-netcdf.github.io/Release/pnetcdf-${PNETCDF_VERSION}.tar.gz
tar xf pnetcdf-${PNETCDF_VERSION}.tar.gz
rm pnetcdf-${PNETCDF_VERSION}.tar.gz
cd pnetcdf-${PNETCDF_VERSION}
mkdir build
cd build
../configure --prefix=$DEPS_DIR --with-netcdf4=$DEPS_DIR
make
make install
cd ../..
rm -rf pnetcdf-${PNETCDF_VERSION}
ls $DEPS_DIR/lib
ls $DEPS_DIR/include
ls $DEPS_DIR/bin

# libaec, used by ecCodes
cd $DEPS_DIR
wget https://gitlab.dkrz.de/k202009/libaec/-/archive/v1.1.3/libaec-v${LIBAEC_VERSION}.tar.gz
tar xf libaec-v${LIBAEC_VERSION}.tar.gz
rm libaec-v${LIBAEC_VERSION}.tar.gz
cd libaec-v${LIBAEC_VERSION}/
mkdir build
cd build/
FC=$FC CC=$CC CXX=$CXX  cmake -D CMAKE_INSTALL_PREFIX=$DEPS_DIR ..
make
make install
cd ../..
rm -rf libaec-v${LIBAEC_VERSION}

# ecCodes
cd $DEPS_DIR
wget https://confluence.ecmwf.int/download/attachments/45757960/eccodes-${ECCODES_VERSION}-Source.tar.gz
tar xvf eccodes-${ECCODES_VERSION}-Source.tar.gz
rm eccodes-${ECCODES_VERSION}-Source.tar.gz
cd eccodes-${ECCODES_VERSION}-Source
mkdir build
cd build
FC=$FC CC=$CC CXX=$CXX cmake -D CMAKE_INSTALL_PREFIX=$DEPS_DIR ..
make 
make install
cd ../..
rm -rf eccodes-${ECCODES_VERSION}-Source


# # OASIS-MTC
# cd $DEPS_DIR
# #git clone --branch OASIS3-MCT_$OASIS_MCT_VERSION https://gitlab.com/cerfacs/oasis3-mct.git
# git clone https://gitlab.com/cerfacs/oasis3-mct.git
# cd oasis3-mct
# git fetch --all
# git checkout OASIS3-MCT_$OASIS_MCT_VERSION
# cd util/make_dir

# rm -f make.inc make.intel_intelmpi
# wget https://raw.githubusercontent.com/pletzer/nzesm_apptainer/oasis/packages/oasis3-mct/make.inc
# wget https://raw.githubusercontent.com/pletzer/nzesm_apptainer/oasis/packages/oasis3-mct/make.intel_intelmpi

# make -f TopMakefileOasis3 static-libs-fortran
# cp ../../INSTALL_OASIS/lib/*.a $DEPS_DIR/lib
# # now module/include files to copy?

################################################

# Check chosen library is available:
if [ $ubuntu_major -lt 18 ]; then
  if [ "$grib_library" = "libeccodes-dev" ]; then
    ereport "The EcCodes library is not available at this Ubuntu release.
Upgrade to Ubuntu 18.04 or later, or supply -v <x.y> to use UM 11.1 or earlier."
  fi

elif [ $ubuntu_major -eq 18 ]; then
    # Settings for Ubuntu 18.04
    
    set -x

    echo "Installing UM and mule dependencies..."
    apt-get install -y python-numpy python-dev python-mock zenity libio-stringy-perl libipc-run-perl libperl-critic-perl $grib_library

    echo
    echo "Adding mule to the installed python packages..."
    echo "${output_dir}/umdir/mule/lib" > /usr/lib/python2.7/dist-packages/mule.pth
    
    echo
    echo "Installing UMDP dependencies..."
    apt-get install -y texlive texlive-latex-extra texlive-generic-extra texlive-science
    echo

elif [ $ubuntu_major -eq 22 ]; then
    # Settings for Ubuntu 22.04

    echo "Installing UM and mule dependencies..."
    apt-get install -y libio-stringy-perl libipc-run-perl libperl-critic-perl

    echo
    echo "Configuring UM python settings..."
    update-alternatives --install /usr/bin/python python /usr/bin/python3 1
    update-alternatives --install /usr/bin/python python /usr/bin/python2 2
    pip2 install numpy mock
    echo
    echo "Adding mule to the installed python packages..."
    echo "${output_dir}/umdir/mule/lib" > /usr/lib/python2.7/dist-packages/mule.pth
    
    echo
    echo "Installing UMDP dependencies..."
    apt-get install -y texlive texlive-latex-extra texlive-science

    echo
    echo "Installing eCcodes from source..."
    apt-get install -y libopenjp2-7-dev cmake
    cd ${output_dir}
    curl -L -s -S https://confluence.ecmwf.int/download/attachments/45757960/eccodes-2.30.2-Source.tar.gz | tar -xz
    cd eccodes-2.30.2-Source
    mkdir -p build && cd build
    # can't put directly into /usr
    mkdir -p /usr/src/eccodes
    FC=$FC CC=$CC CXX=$CXX cmake -DCMAKE_INSTALL_PREFIX=/usr/src/eccodes -DENABLE_JPG=ON ../.
    make
    ctest
    make install
    # now copy necessary files into /usr
    cp /usr/src/eccodes/bin/* /usr/bin/.
    cp /usr/src/eccodes/lib/*.so /usr/lib/.
    cp /usr/src/eccodes/include/* /usr/include/.
    cd ${output_dir}
    rm -rf eccodes-2.30.2-Source
    
fi
